# NE√ò.FLOWOFF PWA - Makefile
# Node validado do Protocolo NŒû√ò

.PHONY: help build deploy dev clean install

# Vari√°veis
SITE_NAME = neo-flowoff-pwa
NETLIFY_SITE_ID = $(shell netlify sites:list --json | jq -r '.[] | select(.name=="$(SITE_NAME)") | .site_id')

# Comandos principais
help: ## Mostra comandos dispon√≠veis
	@echo "‚ö° NE√ò.FLOWOFF PWA - Comandos dispon√≠veis:"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2}'

analyze: ## Executa an√°lise de c√≥digo PWA
	@echo "üîç Executando an√°lise de c√≥digo PWA..."
	@node code-analysis.js

build: ## Build da PWA (otimiza assets)
	@echo "üî® Building PWA..."
	@# Valida estrutura m√≠nima
	@test -f index.html || (echo "‚ùå index.html n√£o encontrado" && exit 1)
	@test -f styles.css || (echo "‚ùå styles.css n√£o encontrado" && exit 1)
	@test -f app.js || (echo "‚ùå app.js n√£o encontrado" && exit 1)
	@test -f manifest.webmanifest || (echo "‚ùå manifest.webmanifest n√£o encontrado" && exit 1)
	@test -f sw.js || (echo "‚ùå sw.js n√£o encontrado" && exit 1)
	@# Cria diret√≥rio dist se n√£o existir
	@mkdir -p dist
	@# Copia arquivos principais
	@cp index.html dist/
	@cp styles.css dist/
	@cp app.js dist/
	@cp manifest.webmanifest dist/
	@cp sw.js dist/
	@# Copia diret√≥rio public
	@cp -r public dist/
	@# Otimiza HTML (remove coment√°rios e espa√ßos desnecess√°rios)
	@sed 's/<!--.*-->//g; s/^[[:space:]]*//g; s/[[:space:]]*$$//g' dist/index.html > dist/index.tmp && mv dist/index.tmp dist/index.html
	@echo "‚úÖ Build conclu√≠do em ./dist/"

deploy: build ## Deploy para Netlify
	@echo "üöÄ Deploying para Netlify..."
	@# Verifica se netlify CLI est√° instalado
	@command -v netlify >/dev/null 2>&1 || (echo "‚ùå Netlify CLI n√£o encontrado. Instale com: npm i -g netlify-cli" && exit 1)
	@# Deploy
	@netlify deploy --prod --dir=dist --site=$(SITE_NAME)
	@echo "‚úÖ Deploy conclu√≠do!"

deploy-preview: build ## Deploy preview para Netlify
	@echo "üëÄ Deploying preview..."
	@netlify deploy --dir=dist --site=$(SITE_NAME)
	@echo "‚úÖ Preview deploy conclu√≠do!"

dev: ## Servidor local para desenvolvimento (recomendado)
	@echo "üöÄ Iniciando servidor Node.js..."
	@command -v node >/dev/null 2>&1 && node server.js || \
	(command -v python3 >/dev/null 2>&1 && python3 -m http.server 3000) || \
	(command -v python >/dev/null 2>&1 && python -m SimpleHTTPServer 3000) || \
	(command -v npx >/dev/null 2>&1 && npx serve . -p 3000) || \
	(echo "‚ùå Nenhum servidor HTTP encontrado. Instale node, python ou npx" && exit 1)

dev-python: ## Servidor Python (alternativo)
	@echo "üêç Iniciando servidor Python..."
	@command -v python3 >/dev/null 2>&1 && python3 -m http.server 3000 || \
	command -v python >/dev/null 2>&1 && python -m SimpleHTTPServer 3000 || \
	(echo "‚ùå Python n√£o encontrado" && exit 1)

docker: ## Servidor Docker (recomendado)
	@echo "üê≥ Iniciando servidor Docker..."
	@command -v docker >/dev/null 2>&1 || (echo "‚ùå Docker n√£o encontrado. Instale o Docker" && exit 1)
	@docker-compose up --build

docker-stop: ## Para o servidor Docker
	@echo "üõë Parando servidor Docker..."
	@docker-compose down

docker-clean: ## Limpa containers e imagens Docker
	@echo "üßπ Limpando Docker..."
	@docker-compose down --rmi all --volumes --remove-orphans

clean: ## Limpa arquivos de build
	@echo "üßπ Limpando build..."
	@rm -rf dist/
	@echo "‚úÖ Limpeza conclu√≠da!"

install: ## Instala depend√™ncias (Netlify CLI)
	@echo "üì¶ Instalando depend√™ncias..."
	@command -v netlify >/dev/null 2>&1 || npm install -g netlify-cli
	@echo "‚úÖ Depend√™ncias instaladas!"

# Comandos de valida√ß√£o
validate: ## Valida estrutura da PWA
	@echo "üîç Validando estrutura PWA..."
	@echo "  ‚úì index.html: $(shell test -f index.html && echo 'OK' || echo 'FALTANDO')"
	@echo "  ‚úì styles.css: $(shell test -f styles.css && echo 'OK' || echo 'FALTANDO')"
	@echo "  ‚úì app.js: $(shell test -f app.js && echo 'OK' || echo 'FALTANDO')"
	@echo "  ‚úì manifest.webmanifest: $(shell test -f manifest.webmanifest && echo 'OK' || echo 'FALTANDO')"
	@echo "  ‚úì sw.js: $(shell test -f sw.js && echo 'OK' || echo 'FALTANDO')"
	@echo "  ‚úì public/: $(shell test -d public && echo 'OK' || echo 'FALTANDO')"
	@echo "‚úÖ Valida√ß√£o conclu√≠da!"

# Comando padr√£o
.DEFAULT_GOAL := help
